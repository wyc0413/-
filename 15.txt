前情回顾

1. 线程

  * 多任务编程
  * 线程是进程的一个分支
  * 创建线程资源消耗少  轻量级
  * 线程共享进程资源

2. 创建线程
   t = Thread()
   t.start()

   t.join()  daemon=True
   自定义线程类

3. 共享资源使用的同步互斥

   原理： 利用函数设置阻塞，来控制执行顺序

   e = Event()  e.set()  e.clear()

   lock = Lock()  lock.acquire()  lock.release()

   死锁

4. GIL问题

   Python的线程不会出现并行，所以无阻塞的情况
   无法提高效率

5. 进程和线程

6. 网络并发模型

   循环模型 ： 同一时刻只能处理一个客户端

   并发模型 ： 能够同时满足多个客户端访问的场景

练习01： 参考多进程并发思想完成
利用面向对象思想完成多线程并发模型


ftp 文件服务器

分析需求

    分为服务端和客户端，要求可以有多个客户端同时操作。
    客户端可以查看服务器文件库中有什么文件。
    客户端可以从文件库中下载文件到本地。
    客户端可以上传一个本地文件到文件库。
    使用print在客户端打印命令输入提示，引导操作

使用技术

    并发 ： 多线程并发
    网络 :  tcp
    文件传输 ： 读取 发送 /  接收  写入

功能划分 封装设计

    面向对象编程 --》 类封装模型

    查看文件列表
    下载文件
    上传文件
    退出

确定网络通信协议

                 请求类型      数据参量
    查看文件列表    LIST

    下载文件       GET         filename

    上传文件       PUT         filename

    退出          EXIT

  响应设计：
                   响应状态
    查看文件列表    OK   FAIL

    下载文件       OK   FAIL

    上传文件       OK   FAIL    FULL  REPLACE


功能逻辑，搭建框架

    结构模型
    查看文件列表
        客户端
            发送请求  LIST
            等待服务器响应结果
             OK ： 接收文件列表
             FAIL: 结束

        服务端
            接收解析请求
            判断是否允许获取列表 （发送结果）
            OK ： 发送文件列表
            FAIL ： 结束

    下载文件
        客户端
            发送请求
            等待响应
            OK ： 接收文件
            FAIL ： 结束

        服务端
            接收解析请求
            判断文件是否存在 （发送结果）
            OK： 发送文件
            fail ： 结束



    上传文件
    退出

C / S 模型的请求应答
request & response

请求 ：  请求类型  数据参数

响应 ：  根据请求的处理情况，返回具体的标志
        告知客户端 请求的处理结果

作业： 1. 重点代码 和 文件服务器程序通读



